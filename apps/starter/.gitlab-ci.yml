stages:
    - analyze
    - build
    - deploy

image: node:14.17.5-alpine

cache:
    paths:
        - node_modules/

# build-staging:
#     stage: build
#     rules:
#         - if: $CI_COMMIT_BRANCH == "staging"
#     script:
#         # Install dependencies
#         - npm install
#         # Build App
#         - npm run build
#     artifacts:
#         paths:
#             # Build folder
#             - dist
#         expire_in: 1 hour

# deploy-staging:
#     stage: deploy
#     script:
#         - npm install -g firebase-tools
#         - firebase use --token $FIREBASE_TOKEN staging
#         - firebase deploy --only hosting -m "Pipeline $CI_PIPELINE_ID, build $CI_BUILD_ID" --non-interactive --token $FIREBASE_TOKEN
#     rules:
#         - if: $CI_COMMIT_BRANCH == "staging"

analyze:sonar:
  stage: analyze
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: 0
  image:
    name: sonarsource/sonar-scanner-cli:4.5
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner -Dsonar.projectKey=$CI_PROJECT_NAME -Dsonar.sources=. -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_USER -Dsonar.password=$SONAR_PASSWORD
  allow_failure: false
  only:
    - main
  tags:
    - nginx-proxy-sonar

build-production:
    stage: build
    rules:
        - if: $CI_COMMIT_BRANCH == "main"
    script:
        # Install dependencies
        - npm install
        # Build App
        - npm run build
    artifacts:
        paths:
            # Build folder
            - dist
        expire_in: 1 hour
    tags:
        - nginx-proxy-sonar

deploy-production:
    stage: deploy
    script:
        - npm install -g firebase-tools
        - firebase use gits-starter --token $FIREBASE_TOKEN 
        - firebase deploy --only hosting:starter -m "Pipeline $CI_PIPELINE_ID, build $CI_BUILD_ID" --non-interactive --token $FIREBASE_TOKEN
    rules:
        - if: $CI_COMMIT_BRANCH == "main"
    tags:
        - nginx-proxy-sonar
